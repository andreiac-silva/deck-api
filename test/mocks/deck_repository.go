// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	models "deck-api/models"

	mock "github.com/stretchr/testify/mock"
)

// DeckRepository is an autogenerated mock type for the DeckRepository type
type DeckRepository struct {
	mock.Mock
}

// FindOne provides a mock function with given fields: id
func (_m *DeckRepository) FindOne(id string) (models.Deck, error) {
	ret := _m.Called(id)

	var r0 models.Deck
	if rf, ok := ret.Get(0).(func(string) models.Deck); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Deck)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: deck
func (_m *DeckRepository) Save(deck models.Deck) (models.Deck, error) {
	ret := _m.Called(deck)

	var r0 models.Deck
	if rf, ok := ret.Get(0).(func(models.Deck) models.Deck); ok {
		r0 = rf(deck)
	} else {
		r0 = ret.Get(0).(models.Deck)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Deck) error); ok {
		r1 = rf(deck)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: deck
func (_m *DeckRepository) Update(deck models.Deck) (models.Deck, error) {
	ret := _m.Called(deck)

	var r0 models.Deck
	if rf, ok := ret.Get(0).(func(models.Deck) models.Deck); ok {
		r0 = rf(deck)
	} else {
		r0 = ret.Get(0).(models.Deck)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Deck) error); ok {
		r1 = rf(deck)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
