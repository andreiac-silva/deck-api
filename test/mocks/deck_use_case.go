// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	models "deck-api/models"

	mock "github.com/stretchr/testify/mock"
)

// DeckUseCase is an autogenerated mock type for the DeckUseCase type
type DeckUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: cards, isShuffled
func (_m *DeckUseCase) Create(cards []models.Card, isShuffled bool) (models.Deck, error) {
	ret := _m.Called(cards, isShuffled)

	var r0 models.Deck
	if rf, ok := ret.Get(0).(func([]models.Card, bool) models.Deck); ok {
		r0 = rf(cards, isShuffled)
	} else {
		r0 = ret.Get(0).(models.Deck)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]models.Card, bool) error); ok {
		r1 = rf(cards, isShuffled)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Draw provides a mock function with given fields: id, count
func (_m *DeckUseCase) Draw(id string, count int) ([]string, error) {
	ret := _m.Called(id, count)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, int) []string); ok {
		r0 = rf(id, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(id, count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *DeckUseCase) Get(id string) (models.Deck, error) {
	ret := _m.Called(id)

	var r0 models.Deck
	if rf, ok := ret.Get(0).(func(string) models.Deck); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Deck)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
